{"version":3,"sources":["components/ChecboxList.js","App.js","reportWebVitals.js","index.js"],"names":["areAllChecked","arr","every","value","CheckboxList","checkboxArray","handleChange","useState","Array","length","fill","checkboxesState","setCheckboxesState","useEffect","checkboxList","map","item","index","type","checked","onChange","position","updatedCheckboxesState","handleOnChange","className","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAMMA,EAAgB,SAAAC,GAAG,OAAIA,EAAIC,OAAO,SAAAC,GAAK,OAAc,IAAVA,MASlC,SAASC,EAAT,GAAyD,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,aAEnD,EAA8CC,mBAAU,IAAIC,MAAMH,EAAcI,QAAQC,MAAK,IAA7F,mBAAOC,EAAP,KAAwBC,EAAxB,KAGAC,qBAAU,WACNP,EAAaK,KACd,CAACA,IAEJ,IAqCMG,EApBKT,EAAcU,KACjB,SAACC,EAAMC,GACH,OACI,6BACI,kCACI,uBACIC,KAAK,WACLf,MAAOa,EACPG,QAASR,EAAgBM,GACzBG,SAAU,kBA1Bf,SAACC,GACpB,IAAMC,EAAyBX,EAAgBI,KAAI,SAACC,EAAMC,GAAP,OAC9CA,IAAUI,GAAYL,EAAOA,KAElCJ,EAAmBU,GAsBqBC,CAAeN,MAElCD,MARAC,MAmBzB,OACI,qBAAKO,UAAU,gBAAf,SACI,+BACI,6BACI,kCACI,uBACIN,KAAK,WACLC,QAASnB,EAAcW,GACvBS,SAAU,WAtC3BpB,EAAcW,GACbC,EAAmB,IAAIJ,MAAMH,EAAcI,QAAQC,MAAK,IAExDE,EAAmB,IAAIJ,MAAMH,EAAcI,QAAQC,MAAK,OA+BhD,kBAUHI,O,MCvDFW,MAlBf,WAMI,OACI,qBAAKD,UAAU,MAAf,SAEI,cAAC,EAAD,CACInB,cARU,CAAC,SAAU,SAAU,SAAU,UASzCC,aAPS,SAAAU,GAAI,OAAIU,QAAQC,IAAIX,SCI9BY,EAZS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.cf203ead.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './CheckboxList.css';\r\n\r\n// checks if every value of an array is true\r\nconst areAllChecked = arr => arr.every( value => value === true );\r\n\r\n/**\r\n * CheckboxList component renders a list of\r\n * checkboxes from an array of string values\r\n * and returns the status of the checkboxes to\r\n * parent component through its function\r\n * parameter handleChange\r\n */\r\nexport default function CheckboxList ({ checkboxArray, handleChange }) {\r\n\r\n    const [checkboxesState, setCheckboxesState] = useState( new Array(checkboxArray.length).fill(false));\r\n\r\n    // returns the status of every checkbox to parent component\r\n    useEffect(() => {\r\n        handleChange(checkboxesState);\r\n    }, [checkboxesState]);\r\n\r\n    const handleOnChange = (position) => {\r\n        const updatedCheckboxesState = checkboxesState.map((item, index) => \r\n            (index === position ? !item : item));\r\n        \r\n        setCheckboxesState(updatedCheckboxesState);\r\n    };\r\n\r\n    // checks or unchecks every checkbox\r\n    const checkAll = () => {\r\n        if(areAllChecked(checkboxesState)){\r\n            setCheckboxesState(new Array(checkboxArray.length).fill(false));    \r\n        }else{\r\n            setCheckboxesState(new Array(checkboxArray.length).fill(true));\r\n        }\r\n    };\r\n\r\n    const generateCheckboxList = () => {\r\n        return checkboxArray.map(\r\n            (item, index) => {\r\n                return (\r\n                    <li key={index} >\r\n                        <label >\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                value={item}\r\n                                checked={checkboxesState[index]}\r\n                                onChange={() => handleOnChange(index)}\r\n                            />\r\n                            {item}\r\n                        </label>\r\n                    </li>\r\n                );\r\n            }\r\n        );\r\n    };\r\n\r\n\r\n    const checkboxList = generateCheckboxList();\r\n\r\n    return (\r\n        <div className=\"checkbox-list\" >\r\n            <ul>\r\n                <li>\r\n                    <label >\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={areAllChecked(checkboxesState)}\r\n                            onChange={() => checkAll()}\r\n                        />\r\n                        Select all\r\n                    </label>\r\n                </li>\r\n\r\n                {checkboxList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nCheckboxList.propTypes = {\r\n    checkboxArray: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    handleChange: PropTypes.func.isRequired,\r\n};","import CheckboxList from './components/ChecboxList';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n    const checkboxArray = ['Item 1', 'Item 2', 'Item 3', 'Item 4'];\r\n\r\n    const handleChange = item => console.log(item);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <CheckboxList\r\n                checkboxArray={checkboxArray}\r\n                handleChange={handleChange}\r\n            />\r\n      \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}